Value Protocol (\S)
Value Type (\S\S)
Value Required Prefix (\S+)
Value List Gateway (\S+)
Value Distance (\d+)
Value Metric (\d+)
Value LastChange (\S+)

Start
  ^.*----- -> Routes

Routes
# 第一行匹配的是一个路由的最前面的 type和prefix  只是为了记录之前提取的数值，然后continue则从本行继续去匹配，默认是next 是读取下一行，但这显示是不行的
  ^  \S \S\S -> Continue.Record
  ^  ${Protocol} ${Type} ${Prefix}\s+via ${Gateway}\s+${Distance}/${Metric}\s+${LastChange}
  ^\s+via ${Gateway}

# 默认的EOF会记录之前匹配的所有

# gateway这个字段我们定义成了list 因为它会有多个，在匹配的时候，第一次匹配到红字1那个rul，然后提取出了N多字段缓存到了一个临时的数据里，然后读取你文本的下一行去在整个状态机里继续匹配，在文本格式上它会匹配到红字2的部分，这个时候发现只匹配到了gateway，然后发现是一个list字段，就把gateway追加到了刚才临时数据的gateway数组里。然后继续下一行文本在状态机里匹配，这个时候下一行符合了continue record那一行的rule，然后进行了记录，由于是continue，所以本行继续一次匹配下一个rule，这样又到了刚才说的去匹配多个字段的那个逻辑里了，如此循环往复，直到所有的数据都匹配到，最后默认EOF是把缓存的数据record。